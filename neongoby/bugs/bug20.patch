diff --git a/lib/Andersens/Andersens.cpp b/lib/Andersens/Andersens.cpp
index 462428a..38e293b 100644
--- a/lib/Andersens/Andersens.cpp
+++ b/lib/Andersens/Andersens.cpp
@@ -798,6 +798,11 @@ void Andersens::IdentifyObjects(Module &M) {
     ObjectNodes[I] = NumObjects++;
     ValueNodes[I] = NumObjects++;
   }
+  for (Module::iterator F = M.begin(), E = M.end(); F != E; ++F) {
+    // Added by Jingyue
+    // The function itself is a memory object.
+    ObjectNodes[F] = NumObjects++;
+  }
 
   // Add nodes for all of the functions and the instructions inside of them.
   for (Module::iterator F = M.begin(), E = M.end(); F != E; ++F) {
@@ -1123,6 +1128,15 @@ void Andersens::CollectConstraints(Module &M) {
     }
   }
 
+  // Added by Jingyue
+  for (Module::iterator F = M.begin(); F != M.end(); ++F) {
+    unsigned ObjectIndex = getObject(F);
+    Node *Object = &GraphNodes[ObjectIndex];
+    Object->setValue(F);
+    Constraints.push_back(Constraint(Constraint::AddressOf, getNodeValue(*F),
+                                     ObjectIndex));
+  }
+
   for (Module::iterator F = M.begin(), E = M.end(); F != E; ++F) {
     // Set up the return value node.
     if (isa<PointerType>(F->getFunctionType()->getReturnType()))
